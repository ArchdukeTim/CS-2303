/*
 * production.c
 *
 *  Created on: Aug 27, 2019
 *      Author: gustt
 */

#include "production.h"

void printboard(Board board) {
	for (int i = 0; i < COLS + 2; i++) {
		printf("%s", EDGE);
	}
	printf("\n");
	for (int row = 0; row < ROWS; row++) {
		printf("%s", EDGE);
		for (int col = 0; col < COLS; col++) {
			if (row == board.y && col == board.x) {
				printf("@");
			} else {
				printf("%c", board.array[row][col]);
			}
		}
		printf("%s\n", EDGE);
	}
	for (int i = 0; i < COLS + 2; i++) {
		printf("%s", EDGE);
	}
	printf("\n");
}

Board vertical(Board board, int distance) {
	int delta = (distance > 0) ? 1 : -1;
	distance = (distance > 0) ? distance : -distance;
	while (distance > 0) {
		if (board.y  + delta >= 0 && board.y  + delta < ROWS) {
			board.array[board.y][board.x] = '|';
			board.y += delta;
		}
		distance--;
	}
	return board;
}

Board horizontal(Board board, int distance) {
	int delta = (distance > 0) ? 1 : -1;
	distance = (distance > 0) ? distance : -distance;
	while (distance > 0) {
		if (board.x  + delta >= 0 && board.x + delta < COLS) {
			board.array[board.y][board.x] = '-';
			board.x += delta;
		}
		distance--;
	}
	return board;
}

void loop(int count){
	int iteration = 1;
	srand(time(NULL));
	Board board = makeBlankboard();
	for(;count>0; count--){
		printf("Iteration: %d\n", iteration++);
		if(rand()%10>5){
			board = horizontal(board, rand() % COLS - board.x);
		} else {
			board = vertical(board, rand() % ROWS - board.y);
		}
		printboard(board);
	}
}
