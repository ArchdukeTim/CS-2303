/*
 * production.c
 *
 *  Created on: Aug 27, 2019
 *      Author: gustt
 */

#include "production.h"

Matrix makeBlankMatrix() {
	int board[ROWS][COLS];
	int x;
	int y;
	Matrix matrix = { board, x, y };
	matrix.x = COLS / 2;
	matrix.y = ROWS / 2;
	for (int i = 0; i < ROWS; i++) {
		for (int j = 0; j < COLS; j++) {
			matrix.array[i][j] = 0;
		}
	}
	return matrix;
}

void printMatrix(Matrix matrix) {
	for (int i = 0; i < COLS + 2; i++) {
		printf("%s", EDGE);
	}
	printf("\n");
	for (int row = 0; row < ROWS; row++) {
		printf("%s", EDGE);
		for (int col = 0; col < COLS; col++) {
			if (row == matrix.y && col == matrix.x) {
				printf("@");
			} else {
				printf("%c", matrix.array[row][col]);
			}
		}
		printf("%s\n", EDGE);
	}
	for (int i = 0; i < COLS + 2; i++) {
		printf("%s", EDGE);
	}
	printf("\n");
}

Matrix vertical(Matrix matrix, int distance) {
	int delta = (distance > 0) ? 1 : -1;
	distance = (distance > 0) ? distance : -distance;
	while (distance > 0) {
		if (matrix.y  + delta >= 0 && matrix.y  + delta < ROWS) {
			matrix.array[matrix.y][matrix.x] = '|';
			matrix.y += delta;
		}
		distance--;
	}
	return matrix;
}

Matrix horizontal(Matrix matrix, int distance) {
	int delta = (distance > 0) ? 1 : -1;
	distance = (distance > 0) ? distance : -distance;
	while (distance > 0) {
		if (matrix.x  + delta >= 0 && matrix.x + delta < COLS) {
			matrix.array[matrix.y][matrix.x] = '-';
			matrix.x += delta;
		}
		distance--;
	}
	return matrix;
}

void loop(int count){
	int iteration = 1;
	srand(time(NULL));
	Matrix matrix = makeBlankMatrix();
	for(;count>0; count--){
		printf("Iteration: %d\n", iteration++);
		if(rand()%10>5){
			matrix = horizontal(matrix, rand() % COLS - matrix.x);
		} else {
			matrix = vertical(matrix, rand() % ROWS - matrix.y);
		}
		printMatrix(matrix);
	}
}
